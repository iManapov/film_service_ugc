@startuml
skinparam componentStyle uml2
actor Пользователь as Client
actor Менеджер as Manager
actor Администратор as Admin

component WebApp


package "Backend" {
    interface JWT_KEY
    [Backend и панель\nуправления\n(Django)] as Django
    [Backend\n(Flask)] as Flask
    [Backend\n(FastAPI)] as FastAPI
    JWT_KEY -right- FastAPI
    JWT_KEY -left- Flask
}

component "Storages" {
    database PostgreSQL {
        frame "Content scheme" {
            [Хранение контента] as Postgre_Content
        }
        frame "Auth scheme" {
            [Хранение информации о пользователях] as Postgre_Auth
        }
    }
    database ElasticSearch
    database Redis {
        frame "Auth" {
            [Хранение недействительных access-токенов\n и действующих refresh-токенов] as Redis_Auth
        }
        frame "Cache" {
            [Хранение в кеше/получение из кеша результатов запроса] as Redis_Cache
        }
    }
}

Manager -down-> WebApp #Orange: Управление контентом
Client -> WebApp #Green: Просмотр информации о фильмах, актерах и жанрах
Client -> WebApp #Blue: Регистрация, аутентификация и авторизация
Admin -up-> WebApp #Gray: Управление пользователями и ролями

WebApp -> Django #Orange: Запросы на добавление, изменение, \n редактирование и удаление контента
WebApp -> FastAPI #Green: Запросы на предоставление \n информации о фильмах, жанрах и актерах
WebApp -up-> Flask #Blue: Запросы на регистрацию, \nвыдачу/отзыв JWT-токенов
WebApp -> Flask #Gray: Запросы на управление пользователями и ролями

Django -down-> Postgre_Content
ElasticSearch -down-> FastAPI: Выдача результатов о фильмах,\n актерах и жанрах в том числе с использованием\n полнотекстового поиска
FastAPI <-down-> Redis_Cache
Flask <-> Postgre_Auth
Flask <-> Redis_Auth

Postgre_Content ..> ElasticSearch: ETL

@enduml